-- mc.cfg AV Media Description Model (MDM)
-- 
-- Dario Andrade <dario@ip.tv>
-- 3.0.1.13
-- ---------------------------------------
--
--
--
-- [encoder,properties]
-- sample_start_skip_time(0) {how much time in ms we wait before sending media}
-- decoder_buffer_time(0) {the buffer window or vbv buffer size (in media time milliseconds) for the encoder, used only for info purposes, the real one is codec dependent}
--
-- [encoder,use_header]
-- <0>|1 {generates header that must be sent to the other party for this bitstream's playback}
--
-- [encoder|decoder,streams]
-- type(video|audio) {media stream type}
--
-- [decoder,properties]
-- jitter_buffer_time(2000) {the buffer window, vbv buffer size (in media time milliseconds) for the decoder, before playing}
-- rebuffer_time(500) {how long to add to decoder jitter buffer before continuing in case of buffer underflow}
--
--
-- -------
-- VIDEO
-- -------
--
-- [encoder|decoder,streams[video],codec]
-- <mpeg4>|snow|h261|h263|h263p|theora|mpeg1video|mpeg2|h264
--
-- [encoder,streams[video],codec_properties]
-- bit_rate(180000) {bit rate for rate control estimation, in bits per second}
-- bit_rate_tolerance(36000) {bitrate tolerance used in average bit rate}
-- gop(50) {number of frames for a group of pictures}
-- noise_reduction(0) {noise reduction filter in encoding process}
-- ime(0) {interlaced motion estimation}
-- idct(0) {interlaced discrete cosine transform}
-- closedgop(0) {closed gop, no inter gop dependency}
-- rc_max(0) {rate control max rate, cbr mode, min==max recommended}
-- rc_min(0) {rate control min rate, cbr mode}
-- rc_buffer_size(0) {the vbv buffer size in bits, for cbr mode operation}
-- rc_buffer_aggressivity(0.0) {rate control estimation coefficient}
-- qmin(2) {min quantization parameter for rate control}
-- qmax(32) {max quantization parameter for rate control}
-- qdiff(3) {max difference between quantization parameters, when controlling rate}
-- qsquish(0.0) {1.0=smoothest continous curve for rate control quantization parameter change}
--
-- [encoder,streams[video],codec_properties[h263p]]
-- umv(0) {unlimited motion vectors}
-- aiv(0)
-- obmc(0)
-- ssm(0) {structured segmented}
-- loop(0) {loop filter}
--
-- [encoder,streams[video],codec_properties[mpeg4]]
-- 4mv(0) {four motions vectors per macroblock}
-- part(0) {data partitioning}
-- gmc(0) {global motion compensation}
-- qpel(0) {quarter pixel subencoding motion estimation}
-- mv0(0) {always try motion vector = {0,0} before encoding}
--
-- [encoder,streams[video],codec_properties[h263p|mpeg4]]
-- acpred(0) {ac prediction}
-- mpeg_quant(<0>=h263,1=mpeg) {h263 or mpeg quantization matrix}
--
-- [encoder,streams[video],codec_properties[h263p|mpeg2|mpeg4|h264]]
-- bframes(0) {number of B frames between non bframes}
-- trellis(0) {trellis quantization}
-- alt(0) {alternate quantization}
--
-- [encoder,streams[video],codec_properties[h264]]
-- coder(<0>=vlc,1=cabac) {the h264 encoder entropy coding type, vlc=variable length coding and cabac=context adaptive binary arithmetic coding, slower but more efficient)
--
-- [encoder,streams[video],payload_type]
-- <MTYPE_MEDIA_VIDEO_MPEG4_320x240>|...
--
-- [encoder|decoder,streams[video],format,size]
-- [qcif|cif|qvga|vga|ntsc|4cif] {size aliases, see defined values below}
-- width(320) {video width, multiple of 16}
-- height(240) {video height, multiple of 16}
-- aspect(0.0) {video aspect ratio, Display Aspect Ratio} 
--
-- [encoder,streams[video],format]
-- frame_rate(15) {frame rate in (frames / frame_rate_base) per second 
-- frame_rate_base(1) {the denonimator for the frame rate value}
-- dv_resolution(DVRESOLUTION_FULL|<DVRESOLUTION_HALF>|DVRESOLUTION_QUARTER|DVRESOLUTION_DC) {decoder resolution output to encoder}
-- dv_half_rate(1) {<1>=half frame rate, 14.98 for ntsc, 12.5 for pal,0=full rate, 29.97 for ntsc, 25 for pal)
--
-- -----
-- AUDIO
-- -----
--
-- [encoder|decoder,streams[audio],codec]
-- <speex>|vorbis|mp2|mp3|g726
--
-- [encoder,streams[audio],network]
-- frames_packet(6) {number of frames to encode in one single packet}
-- frame_duration(20) {frame size in milliseconds}
--
-- [encoder,streams[audio],codec_properties]
-- bit_rate(64000) {audio bitrate in bits per second}
-- quality(0) {audio global quality, codec dependent}
--
-- [encoder,streams[audio],codec_properties[speex]]
-- agc(0) {automatic gain control}
-- agc_level(8000) {the agc level to be used when controlling audio, max is 32235}
-- vad(0) {voice activity detection}
-- aec(0) {acoustic echo canceller}
-- cng(0) {confort noise generation}
-- dtx(0) {codec embedded vad, discontinous transmission signalling}
-- vbr(0) {variable bitrate encoding}
-- rc_max_rate(0) {max vbr bit rate}
-- denoise(0) {preprocessor denoiser}
--
-- [encoder|decoder,streams[audio],format]
-- sample_rate(32000) {audio sample rate in hz, used in codec}
-- channels(1) {number of audio channels}
-- bits(16) {bitsize audio quantization, short int little endian always}
--
-- [decoder,streams[audio],codec_properties[speex]]
-- enh(0) {audio enhancement, enhanced post analysis filter}

--------------
-- Stream
--------------

MC_TYPE_AUDIO 	= 0
MC_TYPE_VIDEO 	= 1
MC_TYPE_BOTH 	= 2

--------------
-- frame sizes
--------------

tiny		= { width = 80, height = 60, }
sqcif		= { width = 128, height = 96, }
qcif		= { width = 176, height = 144, }
medium	= { width = 240, height = 180, }
qvga		= { width = 320, height = 240, }
sif		= { width = 360, height = 240, aspect = 1.3333, }
cif		= { width = 352, height = 288, }
svcd		= { width = 480, height = 480, aspect = 1.3333, }
ntsc		= { width = 704, height = 480, aspect = 1.3333, }
d1		= { width = 720, height = 480, aspect = 1.3333, }
vga		= { width = 640, height = 480, }
s4cif		= { width = 704, height = 576, }
svga		= { width = 800, height = 600, }
xga		= { width = 1024, height = 768, }
hd720		= { width = 1280, height = 720, }
s16cif 	= { width = 1408, height = 1152, }
hd1080	= { width = 1920, height = 1080, }

-- indicate DVSD resolution, if it's used
-- there's a reason for these special numbers
DVRESOLUTION_FULL    	= 1000     
DVRESOLUTION_HALF    	= 1001
DVRESOLUTION_QUARTER 	= 1002
DVRESOLUTION_DC      	= 1003
	
--------------
-- media types
--------------

MTYPE_MEDIA_VOICE				= 2		-- old speex quality 3 NB
MTYPE_MEDIA_CONFERENCE			= 8		-- old H263p QVGA
MTYPE_MEDIA_VOICE_SPEEX_9NB		= 9  	-- Speex quality 9 narrow band
MTYPE_MEDIA_VIDEO_MPEG4_320x240 	= 10 	-- MPEG4 part 2 qvga
MTYPE_MEDIA_VOICE_SPEEX_4UWB		= 11 	-- Speex quality 4 ultra wide band
MTYPE_MEDIA_VIDEO_MPEG4_176x144	= 12 	-- MPEG4 part 2 qcif
MTYPE_MEDIA_VOICE_SPEEX_2UWB		= 13 	-- Speex quality 2 ultra wide band
MTYPE_MEDIA_VOICE_SPEEX_2NB		= 14 	-- Speex quality 2 ultra wide band
MTYPE_MEDIA_VIDEO_H264_QCIF		= 15 	-- H264 QCIF
MTYPE_MEDIA_VIDEO_H264_QVGA		= 16 	-- H264 QVGA
MTYPE_MEDIA_VIDEO_H264_D1		= 17 	-- H264 D1
MTYPE_MEDIA_AUDIO_SPEEX_6F		= 18	-- Speex 6 frames/packet
MTYPE_MEDIA_AUDIO_SPEEX_3F		= 19	-- Speex 3 frames/packet
MTYPE_MEDIA_AUDIO_G729A_6F		= 22	-- G.729A 6 frames/packet
MTYPE_MEDIA_AUDIO_G723_2F		= 24	-- G.723.1 2 frames/packet
MTYPE_MEDIA_AUDIO_G728_4F		= 25	-- G.728 4 frames/packet
MTYPE_MEDIA_AUDIO_VORBIS		= 26	-- Vorbis 1 frame/packet
MTYPE_MEDIA_AUDIO_G711_ALAW		= 27	-- G.711 aLaw 3 frames/packet
MTYPE_MEDIA_AUDIO_G711_ULAW		= 28	-- G.711 uLaw 3 frames/packet
MTYPE_MEDIA_AUDIO_AAC_48		= 29	-- AAC 48kbps 1 frame/packet
MTYPE_MEDIA_AUDIO_AAC_128		= 30	-- AAC 128kbps 1 frame/packet

-- build the profile according to type<n> streams
function profile_av_build_from_type(...)
	local ret = {}
	ret.decoder = {}	
	ret.decoder.streams = {}
	
	for i,type in arg do
		ret.decoder.streams[i] = profile_av_streams_types[type]
	end
	
	return ret
end

---------------------------------------------
-- AV Common Decoder Media Type
---------------------------------------------

profile_av_streams_types =
{
	[MTYPE_MEDIA_VOICE] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},		
	},
	[MTYPE_MEDIA_CONFERENCE] =
	{
		type 				= "video",
		codec 			= "h263",
		format			=
		{
			size			= qvga,
		},
	},
	[MTYPE_MEDIA_VOICE_SPEEX_9NB] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format				=
		{
			sample_rate		= 8000,
			channels		= 1,
		},		
	},
	[MTYPE_MEDIA_VIDEO_MPEG4_320x240] =
	{
		type 				= "video",
		codec 			= "mpeg4",
		format			=
		{
			size			= qvga,
		},		
	},
	[MTYPE_MEDIA_VOICE_SPEEX_4UWB] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format			=
		{
			sample_rate		= 32000,
			channels		= 1,
		},		
	},
	[MTYPE_MEDIA_VIDEO_MPEG4_176x144] =
	{
		type 				= "video",
		codec 			= "mpeg4",
		format			=
		{
			size			= qcif,
		},		
	},
	[MTYPE_MEDIA_VOICE_SPEEX_2UWB] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format			=
		{
			sample_rate		= 32000,
			channels		= 1,
		},		
	},
	[MTYPE_MEDIA_VOICE_SPEEX_2NB] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},		
	},
	[MTYPE_MEDIA_VIDEO_H264_QCIF] =
	{
		type				= "video",
		codec				= "h264",
		format			=
		{
			size			= qcif,
		}
	},
	[MTYPE_MEDIA_VIDEO_H264_QVGA] =
	{
		type				= "video",
		codec				= "h264",
		format			=
		{
			size			= qvga,
		}
	},
	[MTYPE_MEDIA_VIDEO_H264_D1] =
	{
		type				= "video",
		codec				= "h264",
		format			=
		{
			size			= vga,
		}
	},
    [MTYPE_MEDIA_AUDIO_SPEEX_6F] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		format			=
		{
			sample_rate		= 32000,
			channels		= 1,
		},		
	},
    [MTYPE_MEDIA_AUDIO_SPEEX_3F] =
	{
		type				= "audio",
		codec 			= "speex",
		codec_properties 		= "enh",
		network			=
		{
			frames_packet	= 3,
		},
		format			=
		{
			sample_rate		= 32000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_G729A_6F] =
	{
		type				= "audio",
		codec 				= "g729a",
		codec_properties 	= "bit_rate=8000",
		network			=
		{
			frames_packet	= 6,
			frame_duration  = 10,
		},
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_G723_2F] =
	{
		type				= "audio",
		codec 				= "g723",
		codec_properties 	= "bit_rate=6300",
		network			=
		{
			frames_packet	= 2,
			frame_duration  = 30,
		},
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_G728_4F] =
	{
		type				= "audio",
		codec 				= "g728",
		codec_properties 	= "bit_rate=16000",
		network			=
		{
			frames_packet	= 4,
			frame_duration  = 10,
		},
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_VORBIS] =
	{
		type				= "audio",
		codec 				= "vorbis",
		codec_properties 	= "",
		extradata   		= "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",
		network				=
		{
			frames_packet	= 1,
			frame_size      = 64
			--frame_duration  = 20,
		},
		format			=
		{
			sample_rate		= 44100,
			channels		= 2,
		},
	},
    [MTYPE_MEDIA_AUDIO_G711_ALAW] =
	{
		type				= "audio",
		codec 				= "g711alaw",
		codec_properties 	= "",
		network			=
		{
			frames_packet	= 3,
			frame_duration  = 20,
		},
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_G711_ULAW] =
	{
		type				= "audio",
		codec 				= "g711ulaw",
		codec_properties 	= "",
		network			=
		{
			frames_packet	= 3,
			frame_duration  = 20,
		},
		format			=
		{
			sample_rate		= 8000,
			channels		= 1,
		},
	},
    [MTYPE_MEDIA_AUDIO_AAC_48] =
	{
		type				= "audio",
		codec 				= "aac",
		codec_properties 	= "",
		extradata           = "EhA=",
		network				=
		{
			frames_packet	= 1,
			frame_size		= 1024,
		},
		format			=
		{
			sample_rate		= 44100,
			channels		= 2,
		},
	},
    [MTYPE_MEDIA_AUDIO_AAC_128] =
	{
		type				= "audio",
		codec 				= "aac",
		codec_properties 	= "",
		extradata           = "EhA=",
		network				=
		{
			frames_packet	= 1,
			frame_size		= 1024,
		},
		format			=
		{
			sample_rate		= 44100,
			channels		= 2,
		},
	},
}

------------------------------------------------------------------------------------------
-- AV Encoder Profiles
------------------------------------------------------------------------------------------

avconf_stream_voice_speex_lo =
{
	type				= "audio",
	codec 			= "speex",
	codec_properties 		= "quality=2:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_SPEEX_3F,
	network			=
	{
		frames_packet	= 3,
	},
	format			=
	{
		sample_rate		= 32000,
		channels		= 1,
	},
}

avconf_stream_voice_speex_hi =
{
	type				= "audio",
	codec				= "speex",
	codec_properties 		= "quality=4:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_SPEEX_3F,
	network			=
	{
		frames_packet	= 3,
	},
	format			=
	{
		sample_rate		= 32000,
		channels		= 1,
	},
}

avconf_stream_voice_g729a =
{
	type				= "audio",
	codec				= "g729a",
	codec_properties 	= "bit_rate=8000:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G729A_6F,
	network				=
	{
		frames_packet	= 6,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g723_63 =
{
	type				= "audio",
	codec				= "g723",
	codec_properties 	= "bit_rate=6300:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G723_2F,
	network				=
	{
		frames_packet	= 2,
		frame_duration  = 30,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g723_53 =
{
	type				= "audio",
	codec				= "g723",
	codec_properties 	= "bit_rate=5300:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G723_2F,
	network				=
	{
		frames_packet	= 2,
		frame_duration  = 30,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g728_96 =
{
	type				= "audio",
	codec				= "g728",
	codec_properties 	= "bit_rate=9600:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G728_4F,
	network				=
	{
		frames_packet	= 4,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g728_128 =
{
	type				= "audio",
	codec				= "g728",
	codec_properties 	= "bit_rate=12800:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G728_4F,
	network				=
	{
		frames_packet	= 4,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g728_160 =
{
	type				= "audio",
	codec				= "g728",
	codec_properties 	= "bit_rate=16000:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G728_4F,
	network				=
	{
		frames_packet	= 4,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_vorbis =
{
	type				= "audio",
	codec				= "vorbis",
	codec_properties 	= "bit_rate=64000",
	payload_type		= MTYPE_MEDIA_AUDIO_VORBIS,
	network				=
	{
		frames_packet	= 1,
		-- vorbis works with 64 fixed samples not duration
		frame_size 		= 64,
	},
	format				=
	{
		sample_rate		= 44100,
		channels		= 2,
	},
}

avconf_stream_voice_g711_alaw =
{
	type				= "audio",
	codec				= "g711alaw",
	codec_properties 	= "bit_rate=64000:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G711_ALAW,
	network				=
	{
		frames_packet	= 3,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_g711_ulaw =
{
	type				= "audio",
	codec				= "g711ulaw",
	codec_properties 	= "bit_rate=64000:agc:agc_level=8000:vad:denoise",
	payload_type		= MTYPE_MEDIA_AUDIO_G711_ULAW,
	network				=
	{
		frames_packet	= 3,
		frame_duration  = 10,
	},
	format				=
	{
		sample_rate		= 8000,
		channels		= 1,
	},
}

avconf_stream_voice_aac_48 =
{
	type				= "audio",
	codec				= "aac",
	codec_properties 	= "global_header:bit_rate=48000",
	payload_type		= MTYPE_MEDIA_AUDIO_AAC_48,
	network				=
	{
		frames_packet	= 1,
		frame_size 		= 1024,
	},
	format				=
	{
		sample_rate		= 44100,
		channels		= 2,
	},
}

avconf_stream_voice_aac_128 =
{
	type				= "audio",
	codec				= "aac",
	codec_properties 	= "global_header:bit_rate=128000",
	payload_type		= MTYPE_MEDIA_AUDIO_AAC_128,
	network				=
	{
		frames_packet	= 1,
		frame_size 		= 1024,
	},
	format				=
	{
		sample_rate		= 44100,
		channels		= 2,
	},
}

-----------------------------
-- av profiles for 33k
-----------------------------

profile_av_33k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{
					type				=	"video",
					codec 				= 	"mpeg4",
					codec_properties 			= 	"bit_rate=18000:bit_rate_tolerance=3600:gop=15:rc_max=18000:rc_min=18000:rc_buffer_size=18000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=31:qmax=31:" ..
											"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_176x144,
					format				=
					{
						size			= 	qcif,
						frame_rate		= 	5,
					},
				},
				h264 =
				{
					type				=	"video",				
					codec 				= 	"h264",
					codec_properties 			= 	"bit_rate=22000:bit_rate_tolerance=3600:gop=15:rc_max=22000:rc_min=18000:rc_buffer_size=36000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=31:qmax=45:" ..
											"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QCIF,				
					format				=
					{
						size			= 	qcif,
						frame_rate			= 	5,
						dv_resolution		= 	DVRESOLUTION_QUARTER,
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_lo,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_33k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_33k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 500,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_33k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_33k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_33k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_33k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 500,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_33k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_33k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_33k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_33k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 64k
-----------------------------

profile_av_64k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		=	"bit_rate=36000:bit_rate_tolerance=7200:gop=30:rc_max=36000:rc_min=36000:rc_buffer_size=36000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=28:qmax=31:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_176x144,
					format				=
					{
						size			= 	qcif,
						frame_rate		= 	5,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 			= 	"bit_rate=36000:bit_rate_tolerance=7200:gop=30:rc_max=36000:rc_min=36000:rc_buffer_size=36000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=35:qmax=51:" ..
											"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QCIF,
					format				=
					{
						size			= 	qcif,
						frame_rate		= 	10,
						dv_half_rate		= 	0,
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_lo,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_64k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_64k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_64k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_64k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_64k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_64k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_64k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_64k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_64k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_64k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 128k
-----------------------------

profile_av_128k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		= 	"bit_rate=75000:bit_rate_tolerance=15000:gop=45:rc_max=75000:rc_min=75000:rc_buffer_size=75000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=28:qmax=31:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_320x240,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
						dv_half_rate		= 	0,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 		= 	"bit_rate=75000:bit_rate_tolerance=15000:gop=45:rc_max=75000:rc_min=75000:rc_buffer_size=75000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=30:qmax=51:" ..
										"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QVGA,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
						dv_half_rate		= 	0,						
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_hi,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_128k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_128k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_128k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_128k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_128k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_128k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_128k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_128k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_128k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_128k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 256k
-----------------------------

profile_av_256k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		= 	"bit_rate=180000:bit_rate_tolerance=36000:gop=45:rc_max=180000:rc_min=180000:rc_buffer_size=655360:rc_buffer_aggressivity=99.0:qsquish=1.0:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_320x240,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 		= 	"bit_rate=180000:bit_rate_tolerance=36000:gop=45:rc_max=180000:rc_min=180000" ..
                                  ":rc_buffer_size=180000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=25:qmax=45" ..
                                  ":coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QVGA,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_hi,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_256k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_256k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_256k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_256k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_256k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_256k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_256k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_256k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_256k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_256k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 384k
-----------------------------

profile_av_384k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		= 	"bit_rate=288000:bit_rate_tolerance=57600:gop=45:rc_max=288000:rc_min=288000:rc_buffer_size=655360:rc_buffer_aggressivity=99.0:qsquish=1.0:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_320x240,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 		= 	"bit_rate=320000:bit_rate_tolerance=64000:gop=45:rc_max=320000:rc_min=320000:rc_buffer_size=320000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=18:qmax=32:" ..
										"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QVGA,
					format				=
					{
						size			= 	qvga,
						--frame_rate		= 	15,
						frame_rate		= 	30000,
						frame_rate_base		=	1001,
						dv_half_rate		= 	0,						
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_hi,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_384k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_384k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_384k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_384k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_384k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_384k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_384k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_384k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_384k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_384k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 512k
-----------------------------

profile_av_512k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		= 	"bit_rate=420000:bit_rate_tolerance=84000:gop=45:rc_max=420000:rc_min=420000:rc_buffer_size=655360:rc_buffer_aggressivity=99.0:qsquish=1.0:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_320x240,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	15,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 		= 	"bit_rate=380000:bit_rate_tolerance=76000:gop=45:rc_max=380000:rc_min=380000:rc_buffer_size=380000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=12:qmax=31:" ..
										"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QVGA,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	30000,
						frame_rate_base		=	1001,
						dv_half_rate		= 	0,
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_hi,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_512k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_512k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_512k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_512k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_512k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_512k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_512k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_512k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_512k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_512k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------
-- av profiles for 1024k
-----------------------------

profile_av_1024k =
{
	encoder =
	{
		streams = 
		{
			[MC_TYPE_VIDEO] =
			{
				mpeg4 =
				{	
					type				=	"video",
					codec				=	"mpeg4",
					codec_properties 		= 	"bit_rate=880000:bit_rate_tolerance=176000:gop=75:rc_max=880000:rc_min=880000:rc_buffer_size=655360:rc_buffer_aggressivity=99.0:qsquish=1.0:" ..
										"4mv:part:gmc:mv0:trellis:mpeg_quant=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_MPEG4_320x240,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	30000,
						frame_rate_base		=	1001,
						dv_half_rate		= 	0,
					},
				},
				h264 =
				{
					type				=	"video",
					codec 				= 	"h264",
					codec_properties 		= 	"bit_rate=840000:bit_rate_tolerance=168000:gop=75:rc_max=840000:rc_min=840000:rc_buffer_size=840000:rc_buffer_aggressivity=99.0:qsquish=1.0:qmin=2:qmax=31:" ..
										"coder=1",
					payload_type			= 	MTYPE_MEDIA_VIDEO_H264_QVGA,
					format				=
					{
						size			= 	qvga,
						frame_rate		= 	30000,
						frame_rate_base		=	1001,
						dv_half_rate		= 	0,
					},
				},
			},
			[MC_TYPE_AUDIO] 				= 	avconf_stream_voice_speex_hi,
		},
	},
}

--------------------
-- CODEC H264
--------------------

------------
-- MODE conf
------------

profile_av_conf_satellite_h264_1024k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_h264_1024k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_h264_1024k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_h264_1024k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].h264,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

--------
-- MPEG4
--------

------------
-- MODE conf
------------

profile_av_conf_satellite_mpeg4_1024k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 3000,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_conf_internet_mpeg4_1024k =
{
	encoder =
	{
		properties =
		{
			sample_start_skip_time	= 300,
		},
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------
-- MODE ptp
-----------

profile_av_ptp_satellite_mpeg4_1024k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

profile_av_ptp_internet_mpeg4_1024k =
{
	encoder =
	{
		streams =
		{
			[MC_TYPE_VIDEO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_VIDEO].mpeg4,
			[MC_TYPE_AUDIO]			= 	profile_av_1024k.encoder.streams[MC_TYPE_AUDIO],
		},
	},
}

-----------------------------------------------------
-- Legacy
-----------------------------------------------------

-- corresponding avconf profiles using old H263p
profile_av_ptp_internet_h263p_128k =
{
	encoder =
	{
		streams = 
		{
			{
				type				= 	"video",
				codec 				= 	"h263p",
				codec_properties 		= 	"bit_rate=86000:bit_rate_tolerance=17200:gop=45:rc_max=86000:rc_min=86000:rc_buffer_size=655360:rc_buffer_aggressivity=99.0:qsquish=1.0:" ..
									"umv:aiv:obmc:ssm:trellis",
				payload_type			= 	MTYPE_MEDIA_CONFERENCE,
				format				=
				{
					size			= 	qvga,
					frame_rate		= 	10,
					dv_half_rate		= 	0,
				},
			},
			{
				type				= 	"audio",
				codec 				= 	"speex",
				codec_properties 		= 	"quality=3",
				payload_type			= 	MTYPE_MEDIA_VOICE,
				format				=
				{
					sample_rate		= 	8000,
					channels		= 	1,
				},
			},
		},
	},
}

------------------------------------------------------------------------------------------
-- AV Decoder Profiles
------------------------------------------------------------------------------------------

--------------------
-- NETWORK dialup
--------------------

profile_av_conf_dialup =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 3000,
			rebuffer_time				= 0,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}


profile_av_ptp_dialup =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 500,
			rebuffer_time				= 0,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}

--------------------
-- NETWORK satellite
--------------------

profile_av_conf_satellite =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 1800,
			rebuffer_time				= 0,
--			rebuffer_time				= 1,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}


profile_av_ptp_satellite =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 500,
--
			rebuffer_time				= 0,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}

-------------------
-- NETWORK internet
-------------------

profile_av_conf_internet =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 300,
			rebuffer_time				= 0,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}

profile_av_ptp_internet =
{
	decoder =
	{
		properties 	=
		{
			jitter_buffer_time			= 300,
			rebuffer_time				= 0,
		},
		streams 	=
		{
			{
				type				= "video",
				format				=
				{
					size			= qvga,
				},				
			},		
		},
	},
}
