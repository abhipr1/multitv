/////////////////////////////////////////////////////////////////////////////
// Name:        ChannelModesDialog.cpp
// Purpose:     
// Author:      MultiTV
// Modified by: 
// Created:     06/06/2008 15:06:07
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 06/06/2008 15:06:07

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "AppInterface.h"
#include "ChannelModesDialog.h"
#include "Channel.h"
#include "User.h"
#include "ModeList.h"

// Channel bitrates
const wxString ChannelModesDialog::BITRATES[] =	{
												wxT("33"),
												wxT("64"),
												wxT("128"),
												wxT("256"),
												wxT("384"),
												wxT("512"),
												wxT("1024")
												};


/*!
 * ChannelModesDialog type definition
 */
IMPLEMENT_CLASS( ChannelModesDialog, wxFrame )


/*!
 * ChannelModesDialog event table definition
 */
BEGIN_EVENT_TABLE( ChannelModesDialog, wxDialog )
	EVT_BUTTON(ID_BUTTON_OK,ChannelModesDialog::OnOkBtnClick)
	EVT_BUTTON(ID_BUTTON_CANCEL,ChannelModesDialog::OnCancelBtnClick)
	EVT_CHECKBOX( ID_CHECKBOX5, ChannelModesDialog::OnChkboxBitRateClick )
	EVT_CHECKBOX( ID_CHECKBOX9, ChannelModesDialog::OnChkboxTransmissionLimitClick )
	EVT_CHECKBOX( ID_CHECKBOX11, ChannelModesDialog::OnChkboxBandShareClick )
	EVT_CHECKBOX( ID_CHECKBOX13, ChannelModesDialog::OnChkboxOneAudioClick )
	EVT_CHECKBOX( ID_CHECKBOX6, ChannelModesDialog::OnChkboxPasswordClick )
	EVT_CHECKBOX( ID_CHECKBOX10, ChannelModesDialog::OnChkboxUserLimitClick )
END_EVENT_TABLE()


/** ChannelModesDialog constructor.
*
*/
ChannelModesDialog::ChannelModesDialog()
{
    Init();
}

/** ChannelModesDialog constructor.
*
*/
ChannelModesDialog::ChannelModesDialog( wxWindow* parent, AppInterface* iface, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
	m_appInterface = iface;
    Create( parent, id, caption, pos, size, style );
}


/** ChannelModes creator.
 *
 */
bool ChannelModesDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    InitControlsState();
    Centre();
    return true;
}


/** ChannelModesDialog destructor.
 * 
 */
ChannelModesDialog::~ChannelModesDialog()
{
}


/*!
 * Member initialisation
 */
void ChannelModesDialog::Init()
{
    m_txtTopic = NULL;
    m_ckbOpChangeTopic = NULL;
    m_ckbAudioMute = NULL;
    m_ckbNoExternalMessages = NULL;
    m_ckbPrivate = NULL;
    m_ckbBitRate = NULL;
    m_cmbBitRate = NULL;
    m_ckbPassword = NULL;
    m_txtPassword = NULL;
    m_ckbMultipleTransmissions = NULL;
    m_ckbInviteOnly = NULL;
    m_ckbTransmissionLimit = NULL;
    m_spcTransmissionLimit = NULL;
    m_ckbUserLimit = NULL;
    m_spcUserLimit = NULL;
    m_ckbBandShareLimit = NULL;
    m_spcBandShareLimit = NULL;
    m_ckbSecret = NULL;
    m_ckbOneAudio = NULL;
    m_spcOneAudio = NULL;
    m_ckbModerated = NULL;
    m_ckbAutoChangeBitRate = NULL;
    m_btnOk = NULL;
    m_btnCancel = NULL;
}


/*!
 * Control creation for ChannelModes
 */
void ChannelModesDialog::CreateControls()
{
	Mode mode;
	const ModeList &channelModeList = m_appInterface->GetCurrentChannel()->GetModeList();
	
    ChannelModesDialog* itemFrame1 = this;

    wxPanel* panel = new wxPanel( itemFrame1, ID_PANEL1, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );

    wxBoxSizer* verticalSizer = new wxBoxSizer(wxVERTICAL);
    panel->SetSizer(verticalSizer);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    verticalSizer->Add(itemBoxSizer4, 0, wxGROW|wxALL, 5);

    itemBoxSizer4->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Topic
    wxStaticText* itemStaticText6 = new wxStaticText( panel, wxID_STATIC, _("Topic:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txtTopic = new wxTextCtrl( panel, ID_TEXTCTRL1, m_appInterface->GetCurrentChannel()->GetTopic(), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(m_txtTopic, 1, wxGROW|wxALL, 5);

    itemBoxSizer4->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxFlexGridSizer* flexGridSizer = new wxFlexGridSizer(8, 4, 0, 0);
    verticalSizer->Add(flexGridSizer, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	// Only operator change topic
    m_ckbOpChangeTopic = new wxCheckBox( panel, ID_CHECKBOX1, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbOpChangeTopic->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_OP_ONLY_TOPIC));
    flexGridSizer->Add(m_ckbOpChangeTopic, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText11 = new wxStaticText( panel, wxID_STATIC, _("Only moderators can set topic"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText11, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Audio mute
    m_ckbAudioMute = new wxCheckBox( panel, ID_CHECKBOX2, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbAudioMute->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_AUDIO_MUTE));
    flexGridSizer->Add(m_ckbAudioMute, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( panel, wxID_STATIC, _("Silence collaborators"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText13, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// No external messages
    m_ckbNoExternalMessages = new wxCheckBox( panel, ID_CHECKBOX3, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbNoExternalMessages->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_NO_EXT_MSGS));
    flexGridSizer->Add(m_ckbNoExternalMessages, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText15 = new wxStaticText( panel, wxID_STATIC, _("No external messages allowed"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText15, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Private
    m_ckbPrivate = new wxCheckBox( panel, ID_CHECKBOX4, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbPrivate->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_PRIVATE));
    flexGridSizer->Add(m_ckbPrivate, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( panel, wxID_STATIC, _("Private"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText17, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Bit Rate
    m_ckbBitRate = new wxCheckBox( panel, ID_CHECKBOX5, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbBitRate->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_BITRATE, mode));
    flexGridSizer->Add(m_ckbBitRate, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer19 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer19, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText20 = new wxStaticText( panel, wxID_STATIC, _("Adjust bitrate"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(itemStaticText20, 0, wxALIGN_CENTER_VERTICAL, 5);

	wxString strBitrateValue;
	if(m_ckbBitRate->GetValue())
		strBitrateValue =  mode.GetParameter();
	else
		 strBitrateValue = wxEmptyString;
    m_cmbBitRate = new wxComboBox( panel, ID_COMBOBOX1, strBitrateValue , wxDefaultPosition, wxSize(70, -1), 7, BITRATES, wxCB_READONLY );
    itemBoxSizer19->Add(m_cmbBitRate, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText22 = new wxStaticText( panel, wxID_STATIC, _("kbps"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(itemStaticText22, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// Password
    m_ckbPassword = new wxCheckBox( panel, ID_CHECKBOX6, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbPassword->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_PASSWORD_PROTECTED, mode));
    flexGridSizer->Add(m_ckbPassword, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer24, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText25 = new wxStaticText( panel, wxID_STATIC, _("Password"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemStaticText25, 0, wxALIGN_CENTER_VERTICAL, 5);
	
	wxString strPasswordValue; 
	if(m_ckbPassword->GetValue())
		strPasswordValue = mode.GetParameter();
	else
		strPasswordValue = wxEmptyString;

    m_txtPassword = new wxTextCtrl( panel, ID_TEXTCTRL3, strPasswordValue, wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD );
    itemBoxSizer24->Add(m_txtPassword, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// Multiple transmissions
    m_ckbMultipleTransmissions = new wxCheckBox( panel, ID_CHECKBOX7, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbMultipleTransmissions->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_MULTIPLE_TRANSMISSION));
    flexGridSizer->Add(m_ckbMultipleTransmissions, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText28 = new wxStaticText( panel, wxID_STATIC, _("Multiple video transmissions"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText28, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Invite only
    m_ckbInviteOnly = new wxCheckBox( panel, ID_CHECKBOX8, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbInviteOnly->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_INVITE_ONLY));
    flexGridSizer->Add(m_ckbInviteOnly, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText30 = new wxStaticText( panel, wxID_STATIC, _("Invited only"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText30, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Transmission limit
    m_ckbTransmissionLimit = new wxCheckBox( panel, ID_CHECKBOX9, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbTransmissionLimit->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_TRANSMISSION_LIMIT, mode));
    flexGridSizer->Add(m_ckbTransmissionLimit, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer32 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer32, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText33 = new wxStaticText( panel, wxID_STATIC, _("Limit to"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer32->Add(itemStaticText33, 0, wxALIGN_CENTER_VERTICAL, 5);

	// the colaboration limit is the transmission minus 1
	wxString limitString;
	if(m_ckbTransmissionLimit->GetValue())
	{
		long limit;
		mode.GetParameter().ToLong(&limit);
		limit--;
		limitString.Printf(wxT("%d"), limit);
	}
	m_spcTransmissionLimit = new wxSpinCtrl( panel, ID_SPINCTRL1, limitString, wxDefaultPosition, wxSize(40, -1), wxSP_ARROW_KEYS, 0, TRANSMISSION_LIMIT, 0 );
    itemBoxSizer32->Add(m_spcTransmissionLimit, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText35 = new wxStaticText( panel, wxID_STATIC, _("collaborators"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer32->Add(itemStaticText35, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// User limit
    m_ckbUserLimit = new wxCheckBox( panel, ID_CHECKBOX10, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbUserLimit->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_USER_LIMIT, mode));
    flexGridSizer->Add(m_ckbUserLimit, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer37 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer37, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText38 = new wxStaticText( panel, wxID_STATIC, _("Limit to"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer37->Add(itemStaticText38, 0, wxALIGN_CENTER_VERTICAL, 5);
	
	wxString userLimitStr;
	if(m_ckbUserLimit->GetValue())
		userLimitStr = mode.GetParameter();
	else
		userLimitStr = wxEmptyString;

	m_spcUserLimit = new wxSpinCtrl( panel, ID_SPINCTRL2, userLimitStr, wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 0, USER_LIMIT, 0 );
    itemBoxSizer37->Add(m_spcUserLimit, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText40 = new wxStaticText( panel, wxID_STATIC, _("users"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer37->Add(itemStaticText40, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// Band share limit
    m_ckbBandShareLimit = new wxCheckBox( panel, ID_CHECKBOX11, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbBandShareLimit->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_BAND_SHARE_LIMIT, mode));
    flexGridSizer->Add(m_ckbBandShareLimit, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer42 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer42, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText43 = new wxStaticText( panel, wxID_STATIC, _("Share band up to"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer42->Add(itemStaticText43, 0, wxALIGN_CENTER_VERTICAL, 5);
	
	wxString strBandShareLimitValue;
	if(m_ckbBandShareLimit->GetValue())
		 strBandShareLimitValue = mode.GetParameter();
	else
		strBandShareLimitValue = wxEmptyString;

	m_spcBandShareLimit = new wxSpinCtrl( panel, ID_SPINCTRL3, strBandShareLimitValue, wxDefaultPosition, wxSize(40, -1), wxSP_ARROW_KEYS, 0, BAND_SHARE_LIMIT, 0 );
    itemBoxSizer42->Add(m_spcBandShareLimit, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText45 = new wxStaticText( panel, wxID_STATIC, _("transmissions"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer42->Add(itemStaticText45, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// Secret
    m_ckbSecret = new wxCheckBox( panel, ID_CHECKBOX12, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbSecret->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_SECRET));
    flexGridSizer->Add(m_ckbSecret, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText47 = new wxStaticText( panel, wxID_STATIC, _("Secret"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText47, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// One audio
    m_ckbOneAudio = new wxCheckBox( panel, ID_CHECKBOX13, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbOneAudio->SetValue(channelModeList.FindMode(IRM_MODE_CHANNEL_ONE_AUDIO, mode));
    flexGridSizer->Add(m_ckbOneAudio, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer49 = new wxBoxSizer(wxHORIZONTAL);
    flexGridSizer->Add(itemBoxSizer49, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText50 = new wxStaticText( panel, wxID_STATIC, _("Automatic audio switch time"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer49->Add(itemStaticText50, 0, wxALIGN_CENTER_VERTICAL, 5);

	// show transition time in seconds
	wxString timeMsString;
	if(m_ckbOneAudio->GetValue())
	{
		long time;
		mode.GetParameter().ToLong(&time);
		//time /=1000;
		timeMsString.Printf(wxT("%d"), time);
	}
	m_spcOneAudio = new wxSpinCtrl( panel, ID_SPINCTRL4, timeMsString, wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 0, ONE_AUDIO_LIMIT, ONE_AUDIO_INITIAL_TIME );
	itemBoxSizer49->Add(m_spcOneAudio, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxStaticText* itemStaticText52 = new wxStaticText( panel, wxID_STATIC, _("ms"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer49->Add(itemStaticText52, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

	// Moderated
    m_ckbModerated = new wxCheckBox( panel, ID_CHECKBOX14, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbModerated->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_MODERATED));
    flexGridSizer->Add(m_ckbModerated, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText54 = new wxStaticText( panel, wxID_STATIC, _("Moderated"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText54, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Auto change bit rate
    m_ckbAutoChangeBitRate = new wxCheckBox( panel, ID_CHECKBOX15, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_ckbAutoChangeBitRate->SetValue(channelModeList.HasMode(IRM_MODE_CHANNEL_AUTO_BITRATE));
    flexGridSizer->Add(m_ckbAutoChangeBitRate, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText56 = new wxStaticText( panel, wxID_STATIC, _("Adjust bitrate in function of packet loss"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add(itemStaticText56, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer57 = new wxBoxSizer(wxHORIZONTAL);
    verticalSizer->Add(itemBoxSizer57, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_btnOk = new wxButton( panel, ID_BUTTON_OK, _("Ok"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer57->Add(m_btnOk, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_btnCancel = new wxButton( panel, ID_BUTTON_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer57->Add(m_btnCancel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Change the frame size to fit the window
	verticalSizer->Fit(this);

	// Disable controls if user can't change them
	const ChannelUser *channelUser = m_appInterface->GetCurrentChannelUser();
	if(channelUser)
	{
		if(!channelUser->IsChannelOperator())
			DisableControls(channelModeList.HasMode(IRM_MODE_CHANNEL_OP_ONLY_TOPIC));
	}
}

/** Initialize the controls states.
*
*/
void ChannelModesDialog::InitControlsState()
{
    m_cmbBitRate->Enable(m_ckbBitRate->IsChecked());
    m_spcTransmissionLimit->Enable(m_ckbTransmissionLimit->IsChecked());
    m_spcBandShareLimit->Enable(m_ckbBandShareLimit->IsChecked());
    m_spcOneAudio->Enable(m_ckbOneAudio->IsChecked());
    m_txtPassword->Enable(m_ckbPassword->IsChecked());
    m_spcUserLimit->Enable(m_ckbUserLimit->IsChecked());
}


/*!
 * Should we show tooltips?
 */
bool ChannelModesDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */
wxBitmap ChannelModesDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
}

/*!
 * Get icon resources
 */
wxIcon ChannelModesDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
}

void ChannelModesDialog::OnOkBtnClick(wxCommandEvent &event)
{
	Mode mode;
	const ModeList &modeList = m_appInterface->GetCurrentChannel()->GetModeList();
	wxString channel = m_appInterface->GetCurrentChannel()->GetName();

	// Check if topic has changed
	if(m_appInterface->GetCurrentChannel()->GetTopic() != m_txtTopic->GetValue())
		m_appInterface->RequestSetTopic(channel, m_txtTopic->GetValue());

	// Check if any mode changed and send the requests

	// =============================== Private ===============================
	// if activating mode
	if(m_ckbPrivate->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_PRIVATE))
		m_appInterface->RequestSetChannelPrivate(channel);
	// if deactivating mode
	else if(!m_ckbPrivate->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_PRIVATE))
		m_appInterface->RequestUnsetChannelPrivate(channel);
	
	// =============================== Secret =============================== 
	// if activating mode
    if(m_ckbSecret->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_SECRET))
		m_appInterface->RequestSetChannelSecret(channel);
	// if deactivating mode
	else if(!m_ckbSecret->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_SECRET))
		m_appInterface->RequestUnsetChannelSecret(channel);
	
	// =============================== Invite Only =============================== 
	// if activating mode
    if(m_ckbInviteOnly->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_INVITE_ONLY))
		m_appInterface->RequestSetChannelInviteOnly(channel);
	// if deactivating mode
	else if(!m_ckbInviteOnly->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_INVITE_ONLY))
		m_appInterface->RequestUnsetChannelInviteOnly(channel);
	
	// =============================== Operator Change Topic =============================== 
	// if activating mode
    if(m_ckbOpChangeTopic->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_OP_ONLY_TOPIC))
		m_appInterface->RequestSetChannelOpChangeTopic(channel);
	// if deactivating mode
	else if(!m_ckbOpChangeTopic->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_OP_ONLY_TOPIC))
		m_appInterface->RequestUnsetChannelOpChangeTopic(channel);

	// =============================== No External Messages =============================== 
	// if activating mode
    if(m_ckbNoExternalMessages->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_NO_EXT_MSGS))
		m_appInterface->RequestSetChannelNoExternalMessages(channel);
	// if deactivating mode
	else if(!m_ckbNoExternalMessages->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_NO_EXT_MSGS))
		m_appInterface->RequestUnsetChannelNoExternalMessages(channel);
	
	// =============================== Moderated =============================== 
	// if activating mode
    if(m_ckbModerated->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_MODERATED))
		m_appInterface->RequestSetChannelModerated(channel);
	// if deactivating mode
	else if(!m_ckbModerated->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_MODERATED))
		m_appInterface->RequestUnsetChannelModerated(channel);
	
	// =============================== User Limit ===============================
	// if activating mode
    if(m_ckbUserLimit->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_USER_LIMIT))
	{
		m_appInterface->RequestSetChannelUserLimit(channel, m_spcUserLimit->GetValue());
	}
	// if only changing the parameter
	else if (m_ckbUserLimit->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_USER_LIMIT, mode))
	{
		if(mode.GetParameter() != m_spcUserLimit->GetValue())
			m_appInterface->RequestSetChannelUserLimit(channel, m_spcUserLimit->GetValue());
	}
	// if deactivating mode
	else if(!m_ckbUserLimit->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_USER_LIMIT))
	{
		m_appInterface->RequestUnsetChannelUserLimit(channel);
	}
	
	// =============================== Password ===============================
	// if activating mode
    if(m_ckbPassword->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_PASSWORD_PROTECTED))
	{
		m_appInterface->RequestSetChannelKey(channel, m_txtPassword->GetValue());
	}
	// if only changing the parameter
    if(m_ckbPassword->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_PASSWORD_PROTECTED, mode))
	{
		if(mode.GetParameter() != m_txtPassword->GetValue())
			m_appInterface->RequestSetChannelKey(channel, m_txtPassword->GetValue());
	}
	// if deactivating mode
	else if(!m_ckbPassword->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_PASSWORD_PROTECTED))
	{
		m_appInterface->RequestUnsetChannelKey(channel);
	}
	
	// =============================== Bit Rate ===============================
	// if activating mode
    if(m_ckbBitRate->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_BITRATE))
	{
		long bitRate;
		m_cmbBitRate->GetValue().ToLong(&bitRate);
		m_appInterface->RequestSetChannelBitRate(channel, (int)bitRate);
	}
	// if only changing the parameter
    if(m_ckbBitRate->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_BITRATE, mode))
	{
		if(mode.GetParameter() != m_cmbBitRate->GetValue())
		{
			long bitRate;
			m_cmbBitRate->GetValue().ToLong(&bitRate);
			m_appInterface->RequestSetChannelBitRate(channel, (int)bitRate);
		}
	}
	// if deactivating mode
	else if(!m_ckbBitRate->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_BITRATE))
	{
		m_appInterface->RequestUnsetChannelBitRate(channel);
	}
	
	// =============================== Auto Change Bit Rate ===============================
	// if activating mode
    if(m_ckbAutoChangeBitRate->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_AUTO_BITRATE))
		m_appInterface->RequestSetChannelAutoChangeBitRate(channel);
	// if deactivating mode
	else if(!m_ckbAutoChangeBitRate->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_AUTO_BITRATE))
		m_appInterface->RequestUnsetChannelAutoChangeBitRate(channel);
	
	// =============================== Multiple Transmissions ===============================
	// if activating mode
    if(m_ckbMultipleTransmissions->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_MULTIPLE_TRANSMISSION))
		m_appInterface->RequestSetChannelMultipleTransmission(channel);
	// if deactivating mode
	else if(!m_ckbMultipleTransmissions->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_MULTIPLE_TRANSMISSION))
		m_appInterface->RequestUnsetChannelMultipleTransmission(channel);
	
	// =============================== One Audio ===============================
	// if activating mode
    if(m_ckbOneAudio->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_ONE_AUDIO))
	{
		m_appInterface->RequestSetChannelOneAudio(channel, m_spcOneAudio->GetValue());
	}
	// if only changing the parameter
	else if(m_ckbOneAudio->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_ONE_AUDIO, mode))
	{
		if(mode.GetParameter() != (m_spcOneAudio->GetValue()/**1000*/))
		{
			m_appInterface->RequestSetChannelOneAudio(channel, m_spcOneAudio->GetValue()/**1000*/);
		}
	}
	// if deactivating mode
	else if(!m_ckbOneAudio->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_ONE_AUDIO))
	{
		m_appInterface->RequestUnsetChannelOneAudio(channel);
	}
	
	// =============================== Audio Mute ===============================
	// if activating mode
    if(m_ckbAudioMute->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_AUDIO_MUTE))
		m_appInterface->RequestSetChannelAudioMute(channel);
	// if deactivating mode
	else if(!m_ckbAudioMute->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_AUDIO_MUTE))
		m_appInterface->RequestUnsetChannelAudioMute(channel);
	
	// =============================== Band Share Limit ===============================
	// if activating mode
    if(m_ckbBandShareLimit->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_BAND_SHARE_LIMIT))
	{
		m_appInterface->RequestSetChannelBandShareLimit(channel, m_spcBandShareLimit->GetValue());
	}
	// if only changing the parameter
    else if(m_ckbBandShareLimit->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_BAND_SHARE_LIMIT, mode))
	{
		if(mode.GetParameter() != m_spcBandShareLimit->GetValue())
		{
			m_appInterface->RequestSetChannelBandShareLimit(channel, m_spcBandShareLimit->GetValue());
		}
	}
	// if deactivating mode
	else if(!m_ckbBandShareLimit->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_BAND_SHARE_LIMIT))
	{
		m_appInterface->RequestUnsetChannelBandShareLimit(channel);
	}
	
	// =============================== Transmission Limit ===============================
	// if activating mode
    if(m_ckbTransmissionLimit->IsChecked() && !modeList.HasMode(IRM_MODE_CHANNEL_TRANSMISSION_LIMIT))
	{
		// the transmission limit is the colaboration plus 1
		m_appInterface->RequestSetChannelTransmissionLimit(channel, m_spcTransmissionLimit->GetValue() + 1);
	}
	// if only changing the parameter
    if(m_ckbTransmissionLimit->IsChecked() && modeList.FindMode(IRM_MODE_CHANNEL_TRANSMISSION_LIMIT, mode))
	{
		// the transmission limit is the colaboration plus 1
		if(mode.GetParameter() != (m_spcTransmissionLimit->GetValue() + 1))
		{
			m_appInterface->RequestSetChannelTransmissionLimit(channel, m_spcTransmissionLimit->GetValue() + 1);
		}
	}
	// if deactivating mode
	else if(!m_ckbTransmissionLimit->IsChecked() && modeList.HasMode(IRM_MODE_CHANNEL_TRANSMISSION_LIMIT))
	{
		m_appInterface->RequestUnsetChannelTransmissionLimit(channel);
	}

	Close();
}

void ChannelModesDialog::OnCancelBtnClick(wxCommandEvent &event)
{
	Close();
}

/** Enables all controls
*
*/
void ChannelModesDialog::EnableControls()
{
	m_txtTopic->Enable();
    m_ckbOpChangeTopic->Enable();
    m_ckbAudioMute->Enable();
    m_ckbNoExternalMessages->Enable();
    m_ckbPrivate->Enable();
    m_ckbBitRate->Enable();
    m_cmbBitRate->Enable();
    m_ckbPassword->Enable();
    m_txtPassword->Enable();
    m_ckbMultipleTransmissions->Enable();
    m_ckbInviteOnly->Enable();
    m_ckbTransmissionLimit->Enable();
    m_spcTransmissionLimit->Enable();
    m_ckbUserLimit->Enable();
    m_spcUserLimit->Enable();
    m_ckbBandShareLimit->Enable();
    m_spcBandShareLimit->Enable();
    m_ckbSecret->Enable();
    m_ckbOneAudio->Enable();
    m_spcOneAudio->Enable();
    m_ckbModerated->Enable();
    m_ckbAutoChangeBitRate->Enable();
    m_btnOk->Enable();
}

/** Disables all controls
*
*/
void ChannelModesDialog::DisableControls(bool topicTextCtrlToo)
{
	if(topicTextCtrlToo)
		m_txtTopic->Disable();

    m_ckbOpChangeTopic->Disable();
    m_ckbAudioMute->Disable();
    m_ckbNoExternalMessages->Disable();
    m_ckbPrivate->Disable();
    m_ckbBitRate->Disable();
    m_cmbBitRate->Disable();
    m_ckbPassword->Disable();
    m_txtPassword->Disable();
    m_ckbMultipleTransmissions->Disable();
    m_ckbInviteOnly->Disable();
    m_ckbTransmissionLimit->Disable();
    m_spcTransmissionLimit->Disable();
    m_ckbUserLimit->Disable();
    m_spcUserLimit->Disable();
    m_ckbBandShareLimit->Disable();
    m_spcBandShareLimit->Disable();
    m_ckbSecret->Disable();
    m_ckbOneAudio->Disable();
    m_spcOneAudio->Disable();
    m_ckbModerated->Disable();
    m_ckbAutoChangeBitRate->Disable();
    m_btnOk->Disable();

//Change SpinCtrls color background to disable color in linux
//#ifdef _linux
//    m_spcTransmissionLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
//    m_spcTransmissionLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
//    m_spcUserLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
//    m_spcBandShareLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
//    m_spcOneAudio->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
//#endif
}

void ChannelModesDialog::OnChkboxBitRateClick( wxCommandEvent& event )
{
    m_cmbBitRate->Enable(event.IsChecked());
}

void ChannelModesDialog::OnChkboxTransmissionLimitClick( wxCommandEvent& event )
{
    m_spcTransmissionLimit->Enable(event.IsChecked());

//wxGTK enable/disable wxSpinCtrl color background bug fix
#ifdef __WXGTK__
    if (event.IsChecked())
	m_spcTransmissionLimit->SetBackgroundColour(wxColour(255, 255, 255));
    else
	m_spcTransmissionLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
#endif

}
void ChannelModesDialog::OnChkboxBandShareClick( wxCommandEvent& event )
{
    m_spcBandShareLimit->Enable(event.IsChecked());

//wxGTK enable/disable wxSpinCtrl color background bug fix
#ifdef __WXGTK__
    if (event.IsChecked())
	m_spcBandShareLimit->SetBackgroundColour(wxColour(255, 255, 255));
    else
	m_spcBandShareLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
#endif
}

void ChannelModesDialog::OnChkboxOneAudioClick( wxCommandEvent& event )
{
    m_spcOneAudio->Enable(event.IsChecked());

//wxGTK enable/disable wxSpinCtrl color background bug fix
#ifdef __WXGTK__
    if (event.IsChecked())
	m_spcOneAudio->SetBackgroundColour(wxColour(255, 255, 255));
    else
	m_spcOneAudio->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
#endif
}

void ChannelModesDialog::OnChkboxPasswordClick( wxCommandEvent& event )
{
    m_txtPassword->Enable(event.IsChecked());

}

void ChannelModesDialog::OnChkboxUserLimitClick( wxCommandEvent& event )
{
    m_spcUserLimit->Enable(event.IsChecked());

//wxGTK enable/disable wxSpinCtrl color background bug fix
#ifdef __WXGTK__
    if (event.IsChecked())
	m_spcUserLimit->SetBackgroundColour(wxColour(255, 255, 255));
    else
	m_spcUserLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
#endif
}
